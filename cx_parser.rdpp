#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdarg.h>

#include "strf.h"

#include "cx_component.h"

#include "cx_parser.h"
#include "cx_parser.extra.h"
#include "cx_parser.tokens.h"
#include "cx_lex.h"

//#define DDEBUG 1
//#define TOKENDEBUG 1

#define _ddebug_printf _ddprintf

static int _ddprintf(char *fmt, ...)
{
va_list ap;
int     r;

	va_start(ap, fmt);
	r = vfprintf(stderr, fmt, ap);
	va_end(ap);
	return r;
}


void static safe_free(void *ptr)
{
	if(ptr) free(ptr);
}


%%CxParser component_list cx_lex
struct {
	int		type;
	char		*str;
	CxComponent	comp;
	CxComponentList	complist;
	CxAttribute	attr;
	CxAttributeList	attrlist;
}
%%

%%names

%%extra { 
	struct {
		int	lnumber;
		char	*line_start;
		char	*source;
		int	context;
	}
}




component_list:
	component component_list {
		result.complist = cxComponentListNew();
		if(terms[0].comp) result.complist->component = terms[0].comp;
		if(terms[1].complist) result.complist->next = terms[1].complist;
	}
	| {
		result.complist = NULL;
	}
	;

component:
	{ self->extra->context = CX_CTX_NORMAL; }
	OPEN {
		self->extra->context = CX_CTX_TAG;
	} ID attr_list component_close {
		result.comp = cxComponentNew(terms[1].str, NULL, terms[3].complist);
		result.comp->attrlist = terms[2].attrlist;
		safe_free(terms[1].str);
	}
	| CODERAW {
		result.comp = cxComponentNew("CODERAW", terms[0].str, NULL);
		safe_free(terms[0].str);
	}
	| CODEELEMENT {
		result.comp = cxComponentNew("CODEELEMENT", terms[0].str, NULL);
		safe_free(terms[0].str);
	}
	| CODETEXTF {
		result.comp = cxComponentNew("TEXTF", terms[0].str, NULL);
		safe_free(terms[0].str);
	}
	| RAWTEXT {
		result.comp = cxComponentNew("TEXTRAW", terms[0].str, NULL);
		safe_free(terms[0].str);
	}
	;

component_close:
	SLASHCLOSE {
		result.complist = NULL;
	}
	| CLOSE component_list OPENSLASH {
		self->extra->context = CX_CTX_TAG;
	} ID CLOSE {
		result.complist = terms[1].complist;
	}
	;

attr_list:
	attr attr_list {
		result.attrlist = cxAttributeListNew();
		if(terms[0].attr) result.attrlist->attribute = terms[0].attr;
		if(terms[1].attrlist) result.attrlist->next = terms[1].attrlist;
	}
	| {
		result.attrlist = NULL;
	}
	;

attr:
	ID EQUAL attrexpr {
		result.attr = cxAttributeNew(terms[0].str, terms[2].type, terms[2].str);
		safe_free(terms[0].str);
		safe_free(terms[2].str);
	}
	;

attrexpr:
	STRING {
		result.type = CX_ATTR_EXPR_TYPE_STRING;
		result.str = strf("\"%s\"",terms[0].str); 
		free(terms[0].str);
	}
	| CODERAW {
		result.type = CX_ATTR_EXPR_TYPE_CODERAW;
		result.str = strdup(terms[0].str); 
		free(terms[0].str);
	}
	| CODETEXTF {
		result.type = CX_ATTR_EXPR_TYPE_CODETEXTF;
		result.str = strdup(terms[0].str); 
		free(terms[0].str);
	}
	| TKNULL {
		result.type = CX_ATTR_EXPR_TYPE_NULL;
		result.str = NULL;
	}
	;

