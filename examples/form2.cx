/*
	Use example for libhelium using cxc

	A basic form creationg code.
	No validation, not data processing.
	Just rendering.

 */


#include <stdio.h>
#include <stdlib.h>
#include <helium/He.h>
#include "cgi.h"

He mkPage(char *title, ...)
{
va_list	args;
He	children;

	va_start(args, title);
	children = heListv(args);
	va_end(args);

	return {%
	<html>
		<head>
			<link rel="stylesheet" href="/theme_default.css" />
			<link rel="stylesheet" href="/form.css" />
			<meta http-equiv="content-type" content="text/html" charset="ISO-8859-1" />
			<tilte> {title} </title>
		</head>
		<body>
			[ children ]
		</body>
	</html>
	%};
}

He mkFormLine(char *label, He field)
{

	if(label){
		return {% <tr class="formline"> <td> { label } </td> <td> [ field ] </td> </tr> %};
	}else{
		return {% <tr class="formline"> <td colspan="2"> [ field ] </td> </tr> %};
	}
}

He mkFormTitle(He content)
{
	return mkFormLine(NULL, {% <div class="formtitle"> [ content ] </div> %});
}

He mkForm(char *action, char *method, char *title, ...)
{
va_list	args;
He	children;

	va_start(args, title);
	children = heListv(args);
	va_end(args);

	return  {%
	<div class="formclass">
		<form action={action} method={method}>
			[ mkFormTitle(heText(title)) ]
			<table>
				<tbody> [ children ] </tbody>
			</table>
		</form>
	</div>
	%};
}

He mkFormFieldButton(char *type, ...)
{
va_list	args;
He	children;

	va_start(args, type);
	children = heListv(args);
	va_end(args);

	return mkFormLine(NULL, {% <button class="input" type={type} > [ children ] </button> %});
}

He mkFormFieldText(char *label, char *name, char *size)
{
	return mkFormLine(label, {% <input class="input" name={ name } size={ size } /> %});
}

He mkFormFieldHidden(char *name, char *size)
{
	return {% <input type="hidden" name={ name } /> %};
}

He mkFormFieldSelect(char *label, char *name, char **options, int n_options)
{
He select;

	select = {% <select class="input" name={name}> </select> %};

	for(int c=0; c<n_options; c++){
		heAddChild(select, {% <option value={options[c]}> {options[c]} </option> %});
	}
	return mkFormLine(label, select);
}

He mkFormFieldRadio(char *label, char **options, int n_options)
{
He div;

	div = {% <div /> %};

	n_options<<=1;

	for(int c=0; c<n_options; c+=2){
		heAddChild(div, {% <input class="radiobutton" type="radio" name={options[c]} /> %});
		heAddChild(div, {% {options[c+1]} %});
		//heAddChild(div, heText(options[c+1]));
	}
	
	return mkFormLine(label, div);
}

He mkCenterBox(char *name, ...)
{
va_list	args;
He	children;

	va_start(args, name);
	children = heListv(args);
	va_end(args);
  
	return  {%
	<div class="centerbox">
		<div class="shadowbox">
			[ children ]
		</div>
	</div>
	%};
}

He cgi_editform_example(int id)
{
char *continents[] = {"Africa","America","Asia","Europe","Oceania"};
char *money_options[] = {"makemoney", "Make money", "spendmoney", "Spend money", "dontcare", "Don't care about money"};
char *query_string;

	query_string = getenv("QUERY_STRING");

	return {%
	<mkPage("Form Example")> 
		<div Style="color: yellow;">
			Last Query String: { query_string }
		</div>
		<mkCenterBox("noname")>
			<mkForm("form", "GET", "Example Form")>
				[ mkFormFieldHidden("id", "0") ]
				[ mkFormFieldText("Name:", "name", "20") ]
				[ mkFormFieldText("Age:", "age", "20") ]
				[ mkFormFieldSelect("Continent:", "continent", continents, 5) ]
				[ mkFormFieldRadio("Money option:", money_options, 3) ]
				[ mkFormFieldButton("submit", heText("Submit"), NULL) ]
			</mkForm>
		</mkCenterBox>
	</mkPage>
	%};
}

int main(void)
{
StringBuffer	st;
He		page;

	page = cgi_editform_example(0);

	puts("Content-type: text/html\r\n\r\n");
	puts("<!DOCTYPE html PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>");

	st = StringBufferNew(1024);
	heRender(page, st);
	puts(stringBufferGetBuffer(st));
	stringBufferFree(st);
}
